name: CI

on:
  push:
    branches: ["**"]
    tags: ["v*.*.*", "v*.*", "v*"]
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Tests (core)
    runs-on: ubuntu-latest
    env:
      PYTHONPATH: ${{ github.workspace }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install deps (test-only)
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt -r requirements-dev.txt

      - name: Run tests
        run: pytest -q

  build-macos:
    name: Build macOS app
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: macos-latest
    permissions:
      contents: write
    env:
      APP_NAME: API Test Tray
      MAC_CERT_P12: ${{ secrets.MAC_CERT_P12 }}
      MAC_CERT_P12_PASSWORD: ${{ secrets.MAC_CERT_P12_PASSWORD }}
      MAC_CODESIGN_IDENTITY: ${{ secrets.MAC_CODESIGN_IDENTITY }}
      MAC_KEYCHAIN_PASSWORD: ${{ secrets.MAC_KEYCHAIN_PASSWORD }}
      NOTARY_APPLE_ID: ${{ secrets.NOTARY_APPLE_ID }}
      NOTARY_APP_PASSWORD: ${{ secrets.NOTARY_APP_PASSWORD }}
      NOTARY_TEAM_ID: ${{ secrets.NOTARY_TEAM_ID }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install build deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install py2app pillow

      - name: Generate .icns icon
        run: |
          python scripts/make_icon.py
          iconutil -c icns assets/AppIcon.iconset -o assets/AppIcon.icns

      - name: Build .app with py2app
        run: python setup.py py2app

      - name: Show dist contents
        run: ls -la dist

      - name: Detect built app path
        run: |
          set -e
          APP_PATH=$(ls -1d dist/*.app | head -n 1)
          if [ -z "$APP_PATH" ]; then
            echo "No .app found in dist/" >&2
            exit 1
          fi
          APP_NAME=$(basename "$APP_PATH" .app)
          echo "Detected app: $APP_NAME at $APP_PATH"
          echo "APP_PATH=$APP_PATH" >> $GITHUB_ENV
          echo "APP_NAME=$APP_NAME" >> $GITHUB_ENV

      - name: Create temporary keychain
        if: env.MAC_CERT_P12 != ''
        run: |
          security create-keychain -p "$MAC_KEYCHAIN_PASSWORD" build.keychain
          security set-keychain-settings -lut 21600 build.keychain
          security unlock-keychain -p "$MAC_KEYCHAIN_PASSWORD" build.keychain
          security list-keychains -s build.keychain login.keychain

      - name: Import signing certificate
        if: env.MAC_CERT_P12 != ''
        run: |
          echo "$MAC_CERT_P12" | base64 --decode > certificate.p12
          security import certificate.p12 -k build.keychain -P "$MAC_CERT_P12_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k "$MAC_KEYCHAIN_PASSWORD" build.keychain

      - name: Codesign .app
        if: env.MAC_CERT_P12 != ''
        run: |
          codesign --deep --force --options runtime --timestamp \
            --sign "$MAC_CODESIGN_IDENTITY" "$APP_PATH"
          codesign --verify --deep --strict --verbose=2 "$APP_PATH"

      - name: Notarize with notarytool
        if: env.NOTARY_APPLE_ID != '' && env.NOTARY_APP_PASSWORD != '' && env.NOTARY_TEAM_ID != ''
        run: |
          xcrun notarytool submit "$APP_PATH" \
            --apple-id "$NOTARY_APPLE_ID" \
            --password "$NOTARY_APP_PASSWORD" \
            --team-id "$NOTARY_TEAM_ID" \
            --wait

      - name: Staple ticket
        if: env.NOTARY_APPLE_ID != '' && env.NOTARY_APP_PASSWORD != '' && env.NOTARY_TEAM_ID != ''
        run: xcrun stapler staple "$APP_PATH"

      - name: Create DMG
        run: |
          set -e
          STAGE_DIR="stage_dmg"
          rm -rf "$STAGE_DIR"
          mkdir -p "$STAGE_DIR"
          # Copy the app to a staging folder to avoid resource contention in dist/
          cp -R "$APP_PATH" "$STAGE_DIR/${APP_NAME}.app"
          OUT_DMG="$RUNNER_TEMP/${APP_NAME}.dmg"
          hdiutil create -volname "${APP_NAME}" -srcfolder "$STAGE_DIR" -ov -format UDZO "$OUT_DMG"
          mkdir -p dist
          mv "$OUT_DMG" "dist/${APP_NAME}.dmg"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-app
          path: |
            ${{ env.APP_PATH }}
            dist/${{ env.APP_NAME }}.dmg

      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/${{ env.APP_NAME }}.dmg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
